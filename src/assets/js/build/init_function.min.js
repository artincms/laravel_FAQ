var CommonDom_DataTables = '<"datatable-header"fl><"datatable-scroll"t><"datatable-footer"ip>';
var LangJson_DataTables = {
    "decimal": "",
    "emptyTable": "هیچ داده ای در جدول وجود ندارد",
    "info": "نمایش _START_ تا _END_ از _TOTAL_ رکورد",
    "infoEmpty": "نمایش 0 تا 0 از 0 رکورد",
    "infoFiltered": "(فیلتر شده از _MAX_ رکورد)",
    "infoPostFix": "",
    "thousands": ",",
    "lengthMenu": "نمایش _MENU_ رکورد",
    "loadingRecords": "در حال بارگزاری...",
    "processing": "در حال پردازش...",
    "search": "جستجو: ",
    "zeroRecords": "رکوردی با این مشخصات پیدا نشد",
    "paginate": {
        "first": "ابتدا",
        "last": "انتها",
        "next": "بعدی",
        "previous": "قبلی"
    },
    "aria": {
        "sortAscending": ": فعال سازی نمایش به صورت صعودی",
        "sortDescending": ": فعال سازی نمایش به صورت نزولی"
    }
};

$.extend($.fn.dataTable.defaults, {
    autoWidth: false,
    dom: CommonDom_DataTables,
    language: LangJson_DataTables,
    processing: true,
    serverSide: true,
    drawCallback: function () {
        $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').addClass('dropup');
    },
    preDrawCallback: function () {
        $(this).find('tbody tr').slice(-3).find('.dropdown, .btn-group').removeClass('dropup');
    }
});

function dataTablesGrid(selector, var_grid_name, url, columns, more_data, initComplete, scrollX, scrollY, scrollCollapse, orderBy, orderByDesc, row_select,fixedColumns,start_item) {
    scrollX = scrollX || false;
    scrollY = scrollY || false;
    scrollCollapse = scrollCollapse || false;
    orderBy = orderBy || 0;
    orderByDesc = orderByDesc || "desc";
    more_data = more_data || {};
    row_select = row_select || false;
    start_item = start_item || 0 ;
    fixedColumns = fixedColumns || false ;
    var columnDefs = [];
    window[var_grid_name + '_rows_selected'] = [];
    if (row_select) {
        checkbox_column = {
            title: '<input name="select_all" value="1" type="checkbox"/>',
            searchable: false,
            orderable: false,
            width: '1%',
            className: 'dt-body-center',
            render: function (data, type, full, meta) {
                return '<input type="checkbox">';
            }
        };
        columns.unshift(checkbox_column);
    }

    var dataTableOptionObj =
        {
            initComplete: function () {
                if (initComplete == true) {
                    this.api().columns().every(function () {
                        var column = this;
                        var select = $('<select class="filter-select" data-placeholder="Filter"><option value=""></option></select>')
                            .appendTo($(column.footer()).not(':last-child').empty())
                            .on('change', function () {
                                var val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val()
                                );
                                column.search(val ? '^' + val + '$' : '', true, false).draw();
                            });
                        column.data().unique().sort().each(function (d, j) {
                            select.append('<option value="' + d + '">' + d + '</option>')
                        });
                    });
                }
            },
            displayStart:start_item,
            fixedColumns: fixedColumns,
            ajax: {
                url: url,
                type: 'POST',
                data: more_data
            },
            columns: columns,
            scrollX: scrollX,
            scrollY: scrollY,
            scrollCollapse: scrollCollapse,
            order: [[ orderBy, orderByDesc ]],
            rowCallback: function (row, data, dataIndex) {
                if (row_select) {
                    var rowId = data;
                    if (func_search_in_obj('id', data['id'], window[var_grid_name + '_rows_selected'])) {
                        $(row).find('input[type="checkbox"]').prop('checked', true);
                        $(row).addClass('selected');
                    }
                }
            },
            destroy: true,
        };

    if(!scrollY)
    {
        delete  dataTableOptionObj.scrollY;
        delete  dataTableOptionObj.scrollCollapse;
    }

    window[var_grid_name] = $(selector).DataTable(dataTableOptionObj);

    if (row_select) {
        $(selector).on('click', 'input[type="checkbox"]', function (e) {
            var $row = $(this).closest('tr');
            // Get row data
            var data = window[var_grid_name].row($row).data();
            // Get row ID
            //var rowId = data['id'];
            var rowId = data;
            // Determine whether row ID is in the list of selected row IDs
            var index = $.inArray(rowId, window[var_grid_name + '_rows_selected']);
            // If checkbox is checked and row ID is not in list of selected row IDs
            if (this.checked && index === -1) {
                window[var_grid_name + '_rows_selected'].push(rowId);
                // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
            } else if (!this.checked && index !== -1) {
                window[var_grid_name + '_rows_selected'].splice(index, 1);
            }
            if (this.checked) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }
            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(window[var_grid_name]);
            // Prevent click event from propagating to parent
            e.stopPropagation();
        });

        // Handle click on table cells with checkboxes
        $(selector).on('click', 'tbody td, thead th:first-child', function (e) {
            $(this).parent().find('input[type="checkbox"]').trigger('click');
        });

        // Handle click on "Select all" control
        $('thead input[name="select_all"]', window[var_grid_name].table().container()).on('click', function (e) {
            if (this.checked) {
                $(selector + ' tbody input[type="checkbox"]:not(:checked)').trigger('click');
            } else {
                $(selector + ' tbody input[type="checkbox"]:checked').trigger('click');
            }

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });

        // Handle table draw event
        window[var_grid_name].on('draw', function () {
            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(window[var_grid_name]);
        });
    }
}

function updateDataTableSelectAllCtrl(table) {
    var $table = table.table().node();
    var $chkbox_all = $('tbody input[type="checkbox"]', $table);
    var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
    var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);

    // If none of the checkboxes are checked
    if ($chkbox_checked.length === 0) {
        chkbox_select_all.checked = false;
        if ('indeterminate' in chkbox_select_all) {
            chkbox_select_all.indeterminate = false;
        }
        // If all of the checkboxes are checked
    } else if ($chkbox_checked.length === $chkbox_all.length) {
        chkbox_select_all.checked = true;
        if ('indeterminate' in chkbox_select_all) {
            chkbox_select_all.indeterminate = false;
        }
        // If some of the checkboxes are checked
    } else {
        chkbox_select_all.checked = true;
        if ('indeterminate' in chkbox_select_all) {
            chkbox_select_all.indeterminate = true;
        }
    }
}


function init_select2_ajax(selector, url, allowClear, multiple, tags, placeholder, selectable_id) {
    allowClear = allowClear || false;
    selectable_id = selectable_id || null;
    tags = tags || false;
    multiple = multiple || false;
    placeholder = placeholder || "جستجو کنید ...";
    url = url || '{{ "222"}}';
    $(selector).select2({
        minimumInputLength: 3,
        allowClear: allowClear,
        multiple: multiple,
        tags: tags,
        dir: "rtl",
        width: "100%",
        placeholder: placeholder,
        language: "fa",
        ajax: {
            url: url,
            dataType: "json",
            type: "POST",
            quietMillis: 150,
            data: function (term) {
                return {
                    term: term,
                    selectable_id: selectable_id
                };
            },
            results: function (data) {
                return {
                    results: $.map(data, function (item) {
                        return {
                            text: item.text,
                            id: item.id
                        }
                    })
                };
            }
        }
    });
}

function init_select2_data(selector, data, minimumInputLength, allowClear, multiple, tags, placeholder) {
    //console.log(data);
    allowClear = allowClear || false;
    minimumInputLength = minimumInputLength || false;
    tags = tags || false;
    multiple = multiple || false;
    placeholder = placeholder || "جستجو کنید ...";
    data = data || '{{ "222"}}';
    $(selector).select2({
        minimumInputLength: minimumInputLength,
        allowClear: allowClear,
        multiple: multiple,
        tags: tags,
        dir: "rtl",
        width: "100%",
        placeholder: placeholder,
        language: "fa",
        data: data
    });
}
function clear_form_elements(selector) {
    selector = selector || 'document';
    $(selector).find(':input').each(function () {
        switch (this.type) {
            case 'password':
            case 'select-multiple':
            case 'select-one':
            case 'text':
            case 'textarea':
                $(this).val('');
                break;
            case 'checkbox':
            case 'radio':
                this.checked = false;
        }
    });

}
//---------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------//
function checkUsername(str) {
    //console.log(str);
    var error = "";
    var illegalChars = /\W/; // allow letters, numbers, and underscores

    if (str == null) {
        error = "^<strong>وارد کردن نام کاربری الزامی است.</strong>";
    } else if (illegalChars.test(str)) {
        error = "^<strong>نام کاربری فقط می تواند ترکیبی از اعداد و حروف انگلیسی باشد.</strong>";
    } else if (str.length < 5) {
        error = "^<strong>نام کابری باید حداقل 5 کاراکتر باشد.</strong>";
    } else if (str.length > 20) {
        error = "^<strong>نام کابری باید حداکثر 20 کاراکتر باشد.</strong>";
    } else {
        error = null;
    }
    return error;
}

function checkCodeMelli(code) {
    if (!/^\d{10}$/.test(code)
        || code == '0000000000'
        || code == '1111111111'
        || code == '2222222222'
        || code == '3333333333'
        || code == '4444444444'
        || code == '5555555555'
        || code == '6666666666'
        || code == '7777777777'
        || code == '8888888888'
        || code == '9999999999')
        return false;
    var check = parseInt(code[9]);
    var sum = 0;
    var i;
    for (i = 0; i < 9; ++i) {
        sum += parseInt(code[i]) * (10 - i);
    }
    sum %= 11;
    return (sum < 2 && check == sum) || (sum >= 2 && check + sum == 11);
}

function checkMobileNumber(mobile_number) {
    if (/^09[0-9]{9}$/.test(mobile_number))
        return true;
    return false;

}

function check_national_id(code) {
    var L = code.length;

    if (L < 11 || parseInt(code, 10) == 0) return false;

    if (parseInt(code.substr(3, 6), 10) == 0) return false;
    var c = parseInt(code.substr(10, 1), 10);
    var d = parseInt(code.substr(9, 1), 10) + 2;
    var z = new Array(29, 27, 23, 19, 17);
    var s = 0;
    for (var i = 0; i < 10; i++)
        s += (d + parseInt(code.substr(i, 1), 10)) * z[i % 5];
    s = s % 11;
    if (s == 10) s = 0;
    //console.log(s,c);
    return (c == s);
}

validate.validators.username = function (value, options, key, attributes) {
    //console.log('asdasdasdasd');
    var res = checkUsername(value);
    if (res == "") {
        return null;
    }
    else {
        if (options.message) {
            return options.message;
        }
        else {
            return res;
        }
    }
};

validate.validators.only_english = function (value, options, key, attributes) {
    if (value != null) {
        if (/[^A-Za-z]/g.test(value)) {
            return options.message;
        } else {
            return null;
        }
    }
};

validate.validators.only_persian = function (value, options, key, attributes) {
    if (value != null) {
        if (/@"^([\u0600-\u06FF]+\s?)+$"/g.test(value)) {
            return options.message;
        } else {
            return null;
        }
    }
};

validate.validators.only_numbers = function (value, options, key, attributes) {
    if (value != null) {
        if (/[^0-9]/g.test(value)) {
            return options.message;
        } else {
            return null;
        }
    }
};

validate.validators.national_id = function (value, options, key, attributes) {
    if (value != null) {
        //console.log('sss:',check_national_id(value),value);
        if (check_national_id(value)) {
            return null;
        }
        return options.message;
    }
};

validate.validators.codeMelli = function (value, options, key, attributes) {
    if (value != null) {
        //console.log('sss:',check_national_id(value),value);
        if (checkCodeMelli(value)) {
            return null;
        }
        return options.message;
    }
};

validate.validators.iranMobileNumber = function (value, options, key, attributes) {
    if (value != null) {
        //console.log('sss:',check_national_id(value),value);
        if (checkMobileNumber(value)) {
            return null;
        }
        return options.message;
    }
};

validate.validators.require_if_presence = function (value, options, key, attributes) {
    other_attribute_presence = attributes[options.other_attribute_name] == null;
    if (other_attribute_presence) {
        return null;
    }
    else {
        if (value == null) {
            return options.message;
        }
        else {
            return null;
        }
    }
};

validate.validators.require_if = function (value, options, key, attributes) {
    var make = false;
    options.other_attribute_operand || '==';
    target_field_value = attributes[options.other_attribute_name] == null ? 0 : attributes[options.other_attribute_name];
    switch (options.other_attribute_operand) {
        case '>':
            make = target_field_value > options.other_attribute_value;
            break;
        case '<':
            make = target_field_value < options.other_attribute_value;
            break;
        case '>=':
            make = target_field_value >= options.other_attribute_value;
            break;
        case '<=':
            make = target_field_value <= options.other_attribute_value;
            break;
        case '<>':
        case '!=':
            make = target_field_value != options.other_attribute_value;
            break;
        case '!==':
            make = target_field_value !== options.other_attribute_value;
            break;
        case '=':
        case '==':
        default:
            make = target_field_value == options.other_attribute_value;
            break;
    }
    if (make) {
        if (value == null) {
            return options.message;
        }
        if (options.exclusion) {
            var result = true;
            options.exclusion.forEach(function (item) {
                //console.log(value, item, key);
                if (value == item) {
                    result = false;
                }
            });
            if (!result) {
                if (options.exclusion_message) {
                    return options.exclusion_message;
                }
                else {
                    return options.message;
                }
            }
            return null;
        }
        if (options.inclusion) {
            var result = true;
            options.inclusion.forEach(function (item) {
                //console.log(value, item, key);
                if (value != item) {
                    result = false;
                }
            });
            if (!result) {
                if (options.inclusion_message) {
                    return options.inclusion_message;
                }
                else {
                    return options.message;
                }
            }
            return null;
        }
        return null;
    }
    return null;
};

//---------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------//
// Before using it we must add the parse and format functions
// Here is a sample implementation using moment.js
validate.extend(validate.validators.datetime, {
    // The value is guaranteed not to be null or undefined but otherwise it
    // could be anything.
    parse: function (value, options) {
        return +moment.utc(value);
    },
    // Input is a unix timestamp
    format: function (value, options) {
        var format = options.dateOnly ? "YYYY-MM-DD" : "YYYY-MM-DD hh:mm:ss";
        return moment.utc(value).format(format);
    }
});

//init validator js
function init_validatejs(form, constraints, function_name, selector_loader_area, console_log) {
    var console_log = console_log || false;
    // Hook up the form so we can prevent it from being posted
    selector_loader_area = selector_loader_area || '#' + form.id;
    var submits = form.querySelectorAll("button[type=submit]");
    for (var i = 0; i < submits.length; ++i) {
        submits.item(i).addEventListener("click", function (ev) {
            ev.preventDefault();
            var submit_value = $(this).val();
            handleFormSubmit(form, constraints, function_name, submit_value, selector_loader_area, console_log);
        });
    }

    // Hook up the inputs to validate on the fly
    var inputs = form.querySelectorAll("input, textarea, select");
    for (var i = 0; i < inputs.length; ++i) {
        if (inputs.item(i).type == 'select-one') {
            //console.log(inputs.item(i).type);

            $('#' + inputs.item(i).name).on('select2:unselect', function (e) {
                var errors = validate(form, constraints) || {};
                showErrors(form, errors || {});
            });

            $('#' + inputs.item(i).name).on('select2:select', function (e) {
                var errors = validate(form, constraints) || {};
                showErrors(form, errors || {});
            });

        }
        inputs.item(i).addEventListener("focusout", function (ev) {
            var errors = validate(form, constraints) || {};
            showErrorsForInput(this, errors[this.name]);
        });
    }
}

function handleFormSubmit(form, constraints, function_name, submit_value, selector_loader_area, console_log) {
    // validate the form aainst the constraints
    var errors = validate(form, constraints);
    if (console_log) {
        console.log(errors);
    }
    // then we update the form to reflect the results
    showErrors(form, errors || {});
    if (!errors) {
        $(selector_loader_area).append(generate_loader_html('لطفا منتظر بمانید...'));
        function_name(form, submit_value);
    } else {
    }
}

// Updates the inputs with the validation errors
function showErrors(form, errors) {
    // We loop through all the inputs and show the errors for that input
    _.each(form.querySelectorAll("input[name], select[name], textarea[name]"), function (input) {
        // Since the errors can be null if no errors were found we need to handle
        // that
        showErrorsForInput(input, errors && errors[input.name]);
    });
}

// Shows the errors for a specific input
function showErrorsForInput(input, errors) {
    if (input.type == 'hidden')
        return;
    // This is the root of the input
    var formGroup = closestParent(input.parentNode, "form-group")
        // Find where the error messages will be insert into
        , messages = formGroup.querySelector(".messages");
    // First we remove any old messages and resets the classes
    resetFormGroup(formGroup);
    // If we have errors
    if (errors) {
        // we first mark the group has having errors
        formGroup.classList.add("has-error");
        // then we append all the errors
        _.each(errors, function (error) {
            addError(messages, error);
        });
    } else {
        // otherwise we simply mark it as success
        formGroup.classList.add("has-success");
    }
}

// Recusively finds the closest parent that has the specified class
function closestParent(child, className) {
    if (!child || child == document) {
        return null;
    }
    if (child.classList.contains(className)) {
        return child;
    } else {
        return closestParent(child.parentNode, className);
    }
}

function resetFormGroup(formGroup) {
    // Remove the success and error classes
    formGroup.classList.remove("has-error");
    formGroup.classList.remove("has-success");
    // and remove any old messages
    _.each(formGroup.querySelectorAll(".help-block.error"), function (el) {
        el.parentNode.removeChild(el);
    });
}

// Adds the specified error with the following markup
// <p class="help-block error">[message]</p>
function addError(messages, error) {
    var block = document.createElement("p");
    block.classList.add("help-block");
    block.classList.add("error");
    block.innerHTML = error;
    messages.appendChild(block);
}

function showMessages(messages, form_message_box_id, type, form_element) {
    $(document).off("click", '#' + form_message_box_id);
    $(document).on('click', '#' + form_message_box_id, function () {
        formMessagesArea.classList.remove("message_show");
    });
    var formMessagesArea = document.querySelector('#' + form_message_box_id);
    formMessagesArea.innerHTML = "";
    formMessagesArea.classList.remove("message_show");
    formMessagesArea.classList.remove("message_info");
    formMessagesArea.classList.remove("message_success");
    formMessagesArea.classList.remove("message_error");
    formMessagesArea.classList.add("message_show");
    if (type == 'info') {
        formMessagesArea.classList.add("message_info");
    }

    if (type == 'success') {
        formMessagesArea.classList.add("message_success");
    }

    if (type == 'error') {
        formMessagesArea.classList.add("message_error");
    }

    if (type == 'warning') {
        formMessagesArea.classList.add("message_warning");
    }

    var ul = document.createElement("ul");
    //console.log(messages);
    $.each(messages, function (index, value) {
        //console.log( value.title );
        //console.log( value.items );
        var title_li = document.createElement("li");
        var title_items_ul = document.createElement("ul");
        $.each(value.items, function (k, v) {
            //console.log(v);
            var title_items_li = document.createElement("li");
            title_items_li.innerHTML = '<h6>' + v + '</h6>';
            title_items_ul.appendChild(title_items_li);
        });
        title_li.innerHTML = '<h5>' + value.title + '</h5>';
        title_li.append(title_items_ul);
        ul.appendChild(title_li);
    });
    formMessagesArea.append(ul);

    var close_btn = document.createElement("button");
    close_btn.classList.add("close_message_btn");
    close_btn.classList.add("fa");
    close_btn.classList.add("fa-times");
    formMessagesArea.append(close_btn);
    document.getElementById(form_message_box_id).scrollIntoView();
}

function generate_loader_html(loading_text) {
    var loader_html = '' +
        '<div class="total_loader">' +
        '   <div class="total_loader_content" style="">' +
        '       <div class="spinner_area">' +
        '           <div class="spinner_rects">' +
        '               <div class="rect1"></div>' +
        '               <div class="rect2"></div>' +
        '               <div class="rect3"></div>' +
        '               <div class="rect4"></div>' +
        '               <div class="rect5"></div>' +
        '           </div>' +
        '       </div>' +
        '       <div class="text_area">' + loading_text + '</div>' +
        '   </div>' +
        '</div>';
    return loader_html;
}
function menotify(type, title, text) {
    PNotify.desktop.permission();
    (new PNotify({
            title: title,
            type: type,
            text: text,
            desktop: {
                desktop: true
            }
        })
    )
}
function yesNoAlert(title, text, type, confirm_button_text, cancel_button_text, func, function_params,unconfirm_func,unconfirm_func_params) {
    unconfirm_func = unconfirm_func || false ;
    unconfirm_func_params = unconfirm_func_params || {} ;
    swal({
            title: title,
            text: text,
            type: type,
            showCancelButton: true,
            confirmButtonColor: "#EF5350",
            confirmButtonText: confirm_button_text,
            cancelButtonText: cancel_button_text,
            closeOnConfirm: false,
            closeOnCancel: false
        },
        function (isConfirm) {
            if (isConfirm) {
//                    swal({
//                        title: "Deleted!",
//                        text: "Your imaginary file has been deleted.",
//                        confirmButtonColor: "#66BB6A",
//                        type: "success"
//                    });
                func(function_params);
                swal.close();
            }
            else {
                if (unconfirm_func)
                {
                    unconfirm_func(unconfirm_func_params);
                }
                swal.close();
//                    swal({
//                        title: "Cancelled",
//                        text: "Your imaginary file is safe :)",
//                        confirmButtonColor: "#2196F3",
//                        type: "error"
//                    });
            }
        });
}
function init_doAfterStopTyping(selector, function_name, function_params, waiting_time) {
    selector = selector || 'document';
    function_params = function_params || false;
    waiting_time = waiting_time || 500;
    var $this = $(selector);
    //setup before functions
    var typingTimer; //timer identifier
    var doneTypingInterval = waiting_time; //time in ms, 5 second for example
    //on keyup, start the countdown
    $(document).on('keyup', selector, do_after_stop_typing);

    function do_after_stop_typing() {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(function () {
            if (function_params) {
                return function_name($this.val(), function_params);
            }
            else {
                return function_name($this.val());
            }

        }, doneTypingInterval);
    }
    //on keydown, clear the countdown
    $(document).on('keydown', selector, function () {
        clearTimeout(typingTimer);
    });
}

function init_touch_swipe(selector, swipe_func_name, swipe_status_func_name, threshold,element_) {
    var _threshold = threshold || 10;
    var _element = element_ || null;
    $(function () {
        $(selector).swipe({
            swipe: function (event, direction) {
                window[swipe_func_name](selector,event, direction,_element);
            },
            swipeStatus: function (event, phase) {
                window[swipe_status_func_name](selector,event, phase,_element);
            },
            threshold: _threshold
        });
    });
}

function _carousel_swipe(selector,event, direction,element) {
    if (direction === 'right' || direction === 'down') {
        $(element).carousel("next");
    }
    else if (direction === 'left' || direction === 'up') {
        $(element).carousel("prev");
    }
}

function _carousel_swipe_status(selector,event, direction,element) {
    //console.log(event, phase);
}

function init_touch_swipe_carousel() {
    $(".carousel").each(function (k,v) {
        init_touch_swipe('#'+$(v).attr('id')+' .carousel-inner img', '_carousel_swipe', '_carousel_swipe_status', 30,'#'+$(v).attr('id'));
    });
}
/*___________________________________________________FixedColumn_____________________________________________________________________*/
function set_fixed_dropdown_menu(e) {
    $(e).find('.dropdown_gallery').toggleClass('hidden');
    var position = $(e).offset();
    var position2 = $(e).position();
    var scrollTop = $(document).scrollTop();
    var scrollLeft = $(document).scrollLeft();
    var drop_height = $(e).find('.dropdown_gallery').height() + 16;
    if (($(window).height() - position.top) > drop_height) {
        $(e).find('.dropdown_gallery').css({'position': 'fixed', 'top': position.top - scrollTop + 16, 'left': Math.abs(position.left) + 20, 'height': 'fit-content'});
        window.addEventListener("scroll", function (event) {
            var scroll = this.scrollY;
            $(e).find('.dropdown_gallery').css('top', position.top - scroll + 16)
        });
    }
    else {
        $(e).find('.dropdown_gallery').css({'position': 'fixed', 'top': position.top - scrollTop + 16 - drop_height, 'left': Math.abs(position.left) + 20, 'height': 'fit-content'});
        window.addEventListener("scroll", function (event) {
            var scroll = this.scrollY;
            $(e).find('.dropdown_gallery').css('top', position.top - scroll + 16 - drop_height)
        });
    }
}